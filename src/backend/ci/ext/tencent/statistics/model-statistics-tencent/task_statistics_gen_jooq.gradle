/*
 * Tencent is pleased to support the open source community by making BK-CI 蓝鲸持续集成平台 available.
 *
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * BK-CI 蓝鲸持续集成平台 is licensed under the MIT license.
 *
 * A copy of the MIT License is included in this file.
 *
 *
 * Terms of the MIT License:
 * ---------------------------------------------------
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

apply plugin: 'nu.studer.jooq'

dependencies {
    compile "org.jooq:jooq"
    jooqRuntime "mysql:mysql-connector-java"
}

def mysqlURL = System.getProperty("mysqlURL")
def mysqlUser = System.getProperty("mysqlUser")
def mysqlPasswd = System.getProperty("mysqlPasswd")

if (mysqlURL == null) {
    mysqlURL = System.getenv("mysqlURL")
    mysqlUser = System.getenv("mysqlUser")
    mysqlPasswd = System.getenv("mysqlPasswd")
}

if (mysqlURL == null) {
    println "use default mysql database."
    mysqlURL = DB_HOST
    mysqlUser = DB_USERNAME
    mysqlPasswd = DB_PASSWORD
}
def processModuleName = "process"
def processDatabaseName = "devops_process"
def projectModuleName = "project"
def projectDatabaseName = "devops_project"
def openapiModuleName = "openapi"
def openapiDatabaseName = "devops_openapi"

jooq {
    processGenenrate(sourceSets.main) {

        jdbc {
            driver = 'com.mysql.jdbc.Driver'
            url = "jdbc:mysql://${mysqlURL}/${processDatabaseName}?useSSL=false"
            user = mysqlUser
            password = mysqlPasswd
        }

        generator {
            name = 'org.jooq.codegen.DefaultGenerator'

            database {
                name = 'org.jooq.meta.mysql.MySQLDatabase'
                inputSchema = "${processDatabaseName}"
            }

            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }

            generate {
                relations = false
                deprecated = false
                fluentSetters = true
                generatedAnnotation = false
                javaTimeTypes = true
            }

            target {
                packageName = "com.tencent.devops.model.${processModuleName}"
            }
        }
        tasks.generateProcessGenenrateJooqSchemaSource.outputs.upToDateWhen { return false }
    }
    projectGenenrate(sourceSets.main) {

        jdbc {
            driver = 'com.mysql.jdbc.Driver'
            url = "jdbc:mysql://${mysqlURL}/${projectDatabaseName}?useSSL=false"
            user = mysqlUser
            password = mysqlPasswd
        }

        generator {
            name = 'org.jooq.codegen.DefaultGenerator'

            database {
                name = 'org.jooq.meta.mysql.MySQLDatabase'
                inputSchema = "${projectDatabaseName}"
            }

            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }

            generate {
                relations = false
                deprecated = false
                fluentSetters = true
                generatedAnnotation = false
                javaTimeTypes = true
            }

            target {
                packageName = "com.tencent.devops.model.${projectModuleName}"
            }
        }
        tasks.generateProjectGenenrateJooqSchemaSource.outputs.upToDateWhen { return false }
    }
    openapiGenenrate(sourceSets.main) {

        jdbc {
            driver = 'com.mysql.jdbc.Driver'
            url = "jdbc:mysql://${mysqlURL}/${openapiDatabaseName}?useSSL=false"
            user = mysqlUser
            password = mysqlPasswd
        }

        generator {
            name = 'org.jooq.codegen.DefaultGenerator'

            database {
                name = 'org.jooq.meta.mysql.MySQLDatabase'
                inputSchema = "${openapiDatabaseName}"
            }

            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }

            generate {
                relations = false
                deprecated = false
                fluentSetters = true
                generatedAnnotation = false
                javaTimeTypes = true
            }

            target {
                packageName = "com.tencent.devops.model.${openapiModuleName}"
            }
        }
        tasks.generateOpenapiGenenrateJooqSchemaSource.outputs.upToDateWhen { return false }
    }
    compileKotlin {
        destinationDir = new File("build/generated-src")
    }
}
