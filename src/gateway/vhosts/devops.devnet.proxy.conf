	# DEVNET网关转发到IDC网关
	location / {
    	set_by_lua_block $domain {
			return string.gsub(ngx.var.host, "devnet%.", "")
    	}
		proxy_set_header Host $domain;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		proxy_http_version 1.1;
		# 反向代理到目标ip，端口，路径和参数
		proxy_pass http://$domain;
	}


	# devnet的IOS签名
	location ~ ^/ios/sign/(.*) {
    	auth_request /auth/build;
		auth_request_set $projectId $sent_http_x_devops_project_id;
		auth_request_set $pipelineId $sent_http_x_devops_pipeline_id;
		auth_request_set $buildId $sent_http_x_devops_build_id;
		auth_request_set $agentId $sent_http_x_devops_agent_id;
		auth_request_set $vmSeqId $sent_http_x_devops_vm_sid;
		auth_request_set $vmName $sent_http_x_devops_vm_name;
		auth_request_set $channelCode $sent_http_x_devops_channel_code;

		set_by_lua_block $domain {
			local env = config.env
			if env == "prod" then
				local domain = ngx.var.host
				if (string.match(domain, 'sh%-devnet') ~= nil or string.match(domain, 'sh%-devnet') ~= nil) then
					return "sh-ios-sign"
				end
				if (string.match(domain, 'cd%-devnet') ~= nil or string.match(domain, 'cd%-devnet') ~= nil) then
					return "cd-ios-sign"
				end
				if (string.match(domain, 'tj%-devnet') ~= nil or string.match(domain, 'tj%-devnet') ~= nil) then
					return "tj-ios-sign"
				end
				return "ios-sign"
			else 
				return "dev-ios-sign"
			end
    	}

		set_by_lua_block $env {
			return config.env
    	}


		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    	proxy_set_header X-DEVOPS-PROJECT-ID $projectId;
		proxy_set_header X-DEVOPS-PIPELINE-ID $pipelineId;
		proxy_set_header X-DEVOPS-BUILD-ID $buildId;
		proxy_set_header X-DEVOPS-VM-SID $vmSeqId;
		proxy_set_header X-DEVOPS-VM-NAME $vmName;
		proxy_set_header X-DEVOPS-CHANNEL-CODE $channelCode;


		proxy_http_version 1.1;
		# 反向代理到目标ip，端口，路径和参数
		proxy_pass http://$domain/$1?$args&projectId=$projectId&pipelineId=$pipelineId&buildId=$buildId&env=$env;
	}



	# devnet的
	location ~ ^/ios/preview/sign/(.*) {
    	auth_request /auth/service;

		set_by_lua_block $projectId {
			local env = config.env
			if (env == "dev") then
				return "iospreviewdev"
			end
			if (env == "test") then
				return "iospreviewtest"
			end
			if (env == "prod") then
				return "iospreview"
			end
			return "iospreview"
    	}
		set_by_lua_block $pipelineId {
			local env = config.env
			if (env == "dev") then
				return "9c17c65184cd4058844287f7f1db8a13"
			end
			if (env == "test") then
				return "a45296a3c70e47efa98b1e5e12cbcb46"
			end
			if (env == "prod") then
				return "2130e8dde5ef480e8c1a178db53d5cd4"
			end
			return "2130e8dde5ef480e8c1a178db53d5cd4"
    	}

		set_by_lua_block $buildId {
			local env = config.env
			if (env == "dev") then
				return "7f7defd1abf74af38a8413dfba3bbf3c"
			end
			if (env == "test") then
				return "8612cd8715614a0580f8daa6352eca01"
			end
			if (env == "prod") then
				return "d3459faaa7de4ba58a8f5bd8610693d7"
			end
			return "d3459faaa7de4ba58a8f5bd8610693d7"
    	}

		set_by_lua_block $env {
			return config.env
    	}


		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    	proxy_set_header X-DEVOPS-PROJECT-ID $projectId;
		proxy_set_header X-DEVOPS-PIPELINE-ID $pipelineId;
		proxy_set_header X-DEVOPS-BUILD-ID $buildId;


		proxy_http_version 1.1;
		# 反向代理到目标ip，端口，路径和参数
		proxy_pass "http://ios-preview/$1?$args&projectId=$projectId&pipelineId=$pipelineId&buildId=$buildId&env=$env&repoType=1&customPath=ios_sign";
	}



	###### webconsole

	# dockert从idc到devnet的worker的反向代理
	location = /docker-console {
		access_by_lua_file "conf/lua/auth_web_console.lua";
		set_by_lua_block $domain {
        	local targetIP = ngx.var.arg_targetIP
        	return targetIP
    	}
		set_by_lua_block $containerId {
      		local containerId = ngx.var.arg_containerId
      		return containerId
    	}
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Cookie $http_cookie;
		# 后端验证使用。
		proxy_set_header X-AUTH-TOKEN "1173d88ac957e2097a7f86278102d959";

		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
    	proxy_set_header Connection "Upgrade";
		
		
		# 反向代理到目标ip，端口，路径和参数
		proxy_pass http://$domain:9999/bcssapi/v1/consoleproxy/webconsole?containerid=$containerId&$args;
	}


	# dockert从idc到devnet的worker的反向代理
	location = /docker-console-new {
		access_by_lua_file "conf/lua/auth_web_console.lua";
		set_by_lua_block $domain {
            local targetIP = ngx.var.arg_targetIP
            return targetIP
        }
		set_by_lua_block $containerId {
            local containerId = ngx.var.arg_containerId
            return containerId
        }
		set_by_lua_block $eventId {
            local eventId = ngx.var.arg_eventId
            return eventId
        }
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Cookie $http_cookie;
		# 后端验证使用。
		proxy_set_header X-AUTH-TOKEN "1173d88ac957e2097a7f86278102d959";

		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
		
		
		# 反向代理到目标ip，端口，路径和参数
		proxy_pass http://$domain:9999/bcsapi/v1/consoleproxy/start_exec?exec_id=$eventId&container_id=$containerId&$args;
	}

	# dockert从idc到devnet的worker的反向代理
	location = /docker-console-create {
		header_filter_by_lua_file 'conf/lua/cors_filter.lua';
		access_by_lua_file "conf/lua/auth_web_console.lua";
		set_by_lua_block $domain {
            local targetIP = ngx.var.arg_targetIP
            return targetIP
        }
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Cookie $http_cookie;
		# 后端验证使用。
		proxy_set_header X-AUTH-TOKEN "1173d88ac957e2097a7f86278102d959";

		proxy_http_version 1.1;
		
		
		# 反向代理到目标ip，端口，路径和参数
		proxy_pass http://$domain:9999/bcsapi/v1/consoleproxy/create_exec?$args;
	}

	# dockert从idc到devnet的worker的反向代理
	location = /docker-console-resize {
		header_filter_by_lua_file 'conf/lua/cors_filter.lua';
		access_by_lua_file "conf/lua/auth_web_console.lua";
		set_by_lua_block $domain {
            local targetIP = ngx.var.arg_targetIP
            return targetIP
        }
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Cookie $http_cookie;
		# 后端验证使用。
		proxy_set_header X-AUTH-TOKEN "1173d88ac957e2097a7f86278102d959";

		proxy_http_version 1.1;
		
		
		# 反向代理到目标ip，端口，路径和参数
		proxy_pass http://$domain:9999/bcsapi/v1/consoleproxy/resize_exec?$args;
	}